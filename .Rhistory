dobmap,
flag_category,
flag_other_vals,
flag_other_varname,
under_age = FALSE,
age = 18,
person_summary = FALSE){
suppressMessages(library(dplyr))
data("icd_dat", package = "WAACHShelp")
if (!(flag_category %in% c(unique(icd_dat$var), "Other"))) {
stop(sprintf("Error: '%s' is not a valid input. Please choose from %s. If variable not contained in this list, please specify `flag_category == \"Other\"` and use the `flag_other_varname` and `flag_other_vals` arguments.",
flag_category, paste(c(unique(icd_dat$var)), collapse = ", ")))
}
# 1) Calculate age at record
## 1.1) For morbidity data sets -> relative to `subadm`
age_test <- age - 1
print(age_test)
data <- data %>%
left_join(dobmap %>% select(rootnum, dob), by = "rootnum") %>%
mutate(age_adm = lubridate::time_length(lubridate::interval(dob, subadm), unit = "years"),
adm_under_age = case_when(floor(age_adm) <= age_test ~ "Yes",
floor(age_adm) > age_test  ~ "No")) # Calculate ages
# 2) Extract admissible ICD codes for the selected `flag_category`
## Uses the `icd_extraction` function
icds <- icd_extraction(data = data,
flag_category = flag_category,
flag_other_varname = flag_other_varname,
flag_other_vals = flag_other_vals)
# 3) Create flagging variables
## Uses `icd_flagging` function
icd_flags <- icd_flagging(data = data,
flag_category = flag_category,
icd_list = icds,
flag_other_vals = flag_other_vals,
flag_other_varname = flag_other_varname
)
data <- suppressMessages(left_join(data, icd_flags)) # Join by ALL variables to avoid double-ups
# 4) Add functionality for under age flagging
if (under_age == TRUE){
if (!"Other" %in% flag_category){
data <- data %>%
mutate(across(!!flag_category, ~case_when(adm_under_age == "Yes" ~ .,
adm_under_age == "No" ~ "No"),
.names = "{.col}_under_temp")
) %>%
rename_with(~ sub("_under_temp$", paste0("_under", age), .x), ends_with("_under_temp"))
} else if ("Other" %in% flag_category){
data <- data %>%
mutate(across(!!flag_other_varname, ~case_when(adm_under_age == "Yes" ~ .,
adm_under_age == "No" ~ "No"),
.names = "{.col}_under_temp")
) %>%
rename_with(~ sub("_under_temp$", paste0("_under", age), .x), ends_with("_under_temp"))
}
} else if (under_age == FALSE){
data <- data
}
# 5) Add functionality for person-level summary
## Use `person_level` function
if (person_summary == FALSE){
data <- data
} else if (person_summary == TRUE){
if (!"Other" %in% flag_category){
if (under_age == FALSE){
data <- person_level(data, flag_category)
} else if (under_age == TRUE) {
data <- person_level(data, paste0(flag_category, "_under", age))
}
} else if ("Other" %in% flag_category){
if (under_age == FALSE){
data <- person_level(data, flag_other_varname)
} else if (under_age == TRUE){
data <- person_level(data, paste0(flag_other_varname, "_under", age))
}
}
}
return(data)
}
icd_morb_flag(data = morb, dobmap = dobmap, flag_category = "MH_morb", under_age= T, age = 18) %>% select(contains("MH_morb")) %>% table
icd_morb_flag(data = morb, dobmap = dobmap, flag_category = "MH_morb", under_age= T, age = 25) %>% select(contains("MH_morb")) %>% table
remove.packages("WAACHShelp")
rm(list = ls())
devtools::document()
devtools::install()
?WAACHShelp::icd_morb_flag
waachs_palette <- function(type = "disctete",
n,
visualisation = F,
...){
waachs_palette <- c("#D58957", "#FCD16B", "#89A1AD", "#FEF0D8")
if (type == "discrete"){
palette <- waachs_palette
} else if (type == "continuous"){
palette <- grDevices::colorRampPalette(waachs_palette, bias = 2, interpolate = "spline")(n)
} else {
stop(sprintf("Error: Please select from colour categories 'continuous' or 'discrete'."))
}
}
waachs_palette(n = 10)
waachs_palette <- function(type = "discrete",
n,
visualisation = F,
...){
waachs_palette <- c("#D58957", "#FCD16B", "#89A1AD", "#FEF0D8")
if (type == "discrete"){
palette <- waachs_palette
} else if (type == "continuous"){
palette <- grDevices::colorRampPalette(waachs_palette, bias = 2, interpolate = "spline")(n)
} else {
stop(sprintf("Error: Please select from colour categories 'continuous' or 'discrete'."))
}
}
waachs_palette(n = 10, )
waachs_palette <- function(type = "discrete",
n,
visualisation = F,
...){
waachs_palette <- c("#D58957", "#FCD16B", "#89A1AD", "#FEF0D8")
if (type == "discrete"){
palette <- waachs_palette
} else if (type == "continuous"){
palette <- grDevices::colorRampPalette(waachs_palette, bias = 2, interpolate = "spline")(n)
} else {
stop(sprintf("Error: Please select from colour categories 'continuous' or 'discrete'."))
}
return(palette)
}
waachs_palette(n = 10)
waachs_palette(n = 10, visualisation = T)
waachs_palette(n = 10, discrete = T, visualisation = T)
waachs_palette(n = 10, type = "discrete", visualisation = T)
waachs_palette(n = 10, type = "continuous", visualisation = T)
waachs_palette <- function(type = "discrete",
n,
visualisation = F,
...){
waachs_palette <- c("#D58957", "#FCD16B", "#89A1AD", "#FEF0D8")
if (type == "discrete"){
palette <- waachs_palette
} else if (type == "continuous"){
palette <- grDevices::colorRampPalette(waachs_palette, bias = 2, interpolate = "spline")(n)
} else {
stop(sprintf("Error: Please select from colour categories 'continuous' or 'discrete'."))
}
if (visualisation == TRUE){
viz_dat <- data.frame(x = rep(1:ceiling(sqrt(n)), each = ceiling(sqrt(n)))[1:n],
y = rep(1:ceiling(sqrt(n)), each = ceiling(sqrt(n)))[1:n],
colours = palette
)
plot <- ggplot(viz_dat, aes(x = x, y = y, fill = colours)) +
geom_tile() +
scale_fill_identity() +
theme_minimal() +
theme(legend.position = "none") +
labs(title = "Continuous Palette Visualization")
return(list(palette = palette,
plot = plot))
} else if (visualiation == FALSE){
return(palette)
}
}
waachs_palette(n = 10, type = "continuous", visualisation = T)
library(ggplot2)
waachs_palette <- function(type = "discrete",
n,
visualisation = F,
...){
waachs_palette <- c("#D58957", "#FCD16B", "#89A1AD", "#FEF0D8")
if (type == "discrete"){
palette <- waachs_palette
} else if (type == "continuous"){
palette <- grDevices::colorRampPalette(waachs_palette, bias = 2, interpolate = "spline")(n)
} else {
stop(sprintf("Error: Please select from colour categories 'continuous' or 'discrete'."))
}
if (visualisation == TRUE){
viz_dat <- data.frame(x = rep(1:ceiling(sqrt(n)), each = ceiling(sqrt(n)))[1:n],
y = rep(1:ceiling(sqrt(n)), each = ceiling(sqrt(n)))[1:n],
colours = palette
)
plot <- ggplot(viz_dat, aes(x = x, y = y, fill = colours)) +
geom_tile() +
scale_fill_identity() +
theme_minimal() +
theme(legend.position = "none") +
labs(title = "Continuous Palette Visualization")
return(list(palette = palette,
plot = plot))
} else if (visualiation == FALSE){
return(palette)
}
}
waachs_palette(n = 10, type = "continuous", visualisation = T)
waachs_palette(type = "continuous", visualisation = T)
library(ggplot2)
waachs_palette <- function(type = "discrete",
n,
visualisation = F,
...){
waachs_palette <- c("#D58957", "#FCD16B", "#89A1AD", "#FEF0D8")
if (type == "discrete"){
palette <- waachs_palette
} else if (type == "continuous"){
palette <- grDevices::colorRampPalette(waachs_palette, bias = 2, interpolate = "spline")(n)
} else {
stop(sprintf("Error: Please select from colour categories 'continuous' or 'discrete'."))
}
if (visualisation == TRUE){
viz_dat <- data.frame(x = rep(1:ceiling(sqrt(n)), each = ceiling(sqrt(n)))[1:n],
y = rep(1:ceiling(sqrt(n)), each = ceiling(sqrt(n)))[1:n],
colours = palette
)
plot <- ggplot2::ggplot(viz_dat, aes(x = x, y = y, fill = colours)) +
ggplot2::geom_tile() +
ggplot2::scale_fill_identity() +
ggplot2::theme_minimal() +
ggplot2::theme(legend.position = "none") +
ggplot2::labs(title = "Continuous Palette Visualization")
return(list(palette = palette,
plot = plot))
} else if (visualiation == FALSE){
return(palette)
}
}
waachs_palette(type = "continuous", visualisation = T)
waachs_palette(n = 100, type = "continuous", visualisation = T)
waachs_palette <- function(type = "discrete",
n,
visualisation = F,
...){
waachs_palette <- c("#D58957", "#FCD16B", "#89A1AD", "#FEF0D8")
if (type == "discrete"){
palette <- waachs_palette
} else if (type == "continuous"){
spectrum <- grDevices::colorRampPalette(waachs_palette, bias = 2, interpolate = "spline")
palette <- spectrum(n)
} else {
stop(sprintf("Error: Please select from colour categories 'continuous' or 'discrete'."))
}
if (visualisation == TRUE){
viz_dat <- data.frame(x = rep(1:ceiling(sqrt(n)), each = ceiling(sqrt(n)))[1:n],
y = rep(1:ceiling(sqrt(n)), each = ceiling(sqrt(n)))[1:n],
colours = palette
)
plot <- ggplot2::ggplot(viz_dat, aes(x = x, y = y, fill = colours)) +
ggplot2::geom_tile() +
ggplot2::scale_fill_identity() +
ggplot2::theme_minimal() +
ggplot2::theme(legend.position = "none") +
ggplot2::labs(title = "Continuous Palette Visualization")
return(list(palette = palette,
plot = plot))
} else if (visualiation == FALSE){
return(palette)
}
}
waachs_palette(n = 100, type = "continuous", visualisation = T)
waachs_palette <- function(type = "discrete",
n,
visualisation = F,
...){
waachs_palette <- c("#D58957", "#FCD16B", "#89A1AD", "#FEF0D8")
if (type == "discrete"){
palette <- waachs_palette
} else if (type == "continuous"){
spectrum <- grDevices::colorRampPalette(waachs_palette, bias = 2, interpolate = "spline")
palette <- spectrum(n)
} else {
stop(sprintf("Error: Please select from colour categories 'continuous' or 'discrete'."))
}
if (visualisation == TRUE){
viz_dat <- data.frame(x = rep(1:ceiling(sqrt(n)), each = ceiling(sqrt(n)))[1:n],
y = rep(1:ceiling(sqrt(n)), each = ceiling(sqrt(n)))[1:n],
colours = palette
)
plot <- ggplot2::ggplot(viz_dat, aes(x = x, y = y, fill = colours)) +
ggplot2::geom_tile() +
ggplot2::scale_fill_identity() +
ggplot2::theme_minimal() +
ggplot2::theme(legend.position = "none") +
ggplot2::labs(title = "Continuous Palette Visualization")
return(list(palette = palette,
dat = viz_dat,
plot = plot))
} else if (visualiation == FALSE){
return(palette)
}
}
waachs_palette(n = 100, type = "continuous", visualisation = T)
waachs_palette <- function(type = "discrete",
n,
visualisation = F,
...){
waachs_palette <- c("#D58957", "#FCD16B", "#89A1AD", "#FEF0D8")
if (type == "discrete"){
palette <- waachs_palette
} else if (type == "continuous"){
spectrum <- grDevices::colorRampPalette(waachs_palette, bias = 2, interpolate = "spline")
palette <- spectrum(n)
} else {
stop(sprintf("Error: Please select from colour categories 'continuous' or 'discrete'."))
}
if (visualisation == TRUE){
viz_dat <- data.frame(x = rep(1:ceiling(sqrt(n)), each = ceiling(sqrt(n)))[1:n],
y = rep(1:ceiling(sqrt(n)), times = ceiling(sqrt(n)))[1:n],
colours = palette
)
plot <- ggplot2::ggplot(viz_dat, aes(x = x, y = y, fill = colours)) +
ggplot2::geom_tile() +
ggplot2::scale_fill_identity() +
ggplot2::theme_minimal() +
ggplot2::theme(legend.position = "none") +
ggplot2::labs(title = "Continuous Palette Visualization")
return(list(palette = palette,
dat = viz_dat,
plot = plot))
} else if (visualiation == FALSE){
return(palette)
}
}
waachs_palette(n = 100, type = "continuous", visualisation = T)
waachs_palette <- function(type = "discrete",
n,
visualisation = F,
...){
waachs_palette <- c("#D58957", "#FCD16B", "#89A1AD", "#FEF0D8")
if (type == "discrete"){
palette <- waachs_palette
} else if (type == "continuous"){
spectrum <- grDevices::colorRampPalette(waachs_palette, bias = 2, interpolate = "spline")
palette <- spectrum(n)
} else {
stop(sprintf("Error: Please select from colour categories 'continuous' or 'discrete'."))
}
if (visualisation == TRUE){
viz_dat <- data.frame(x = rep(1:ceiling(sqrt(n)), each = ceiling(sqrt(n)))[1:n],
y = rep(1:ceiling(sqrt(n)), times = ceiling(sqrt(n)))[1:n],
colours = palette
)
plot <- ggplot2::ggplot(viz_dat, aes(x = x, y = y, fill = colours)) +
ggplot2::geom_tile() +
ggplot2::scale_fill_identity() +
ggplot2::theme_void() +
ggplot2::theme(legend.position = "none") +
ggplot2::labs(title = "Continuous Palette Visualization")
return(list(palette = palette,
dat = viz_dat,
plot = plot))
} else if (visualiation == FALSE){
return(palette)
}
}
waachs_palette(n = 100, type = "continuous", visualisation = T)
waachs_palette <- function(type = "discrete",
n,
visualisation = F,
...){
waachs_palette <- c("#D58957", "#FCD16B", "#89A1AD", "#FEF0D8")
if (type == "discrete"){
palette <- waachs_palette
} else if (type == "continuous"){
spectrum <- grDevices::colorRampPalette(waachs_palette, bias = 2, interpolate = "spline")
palette <- spectrum(n)
} else {
stop(sprintf("Error: Please select from colour categories 'continuous' or 'discrete'."))
}
if (visualisation == TRUE){
viz_dat <- data.frame(x = rep(1:ceiling(sqrt(n)), each = ceiling(sqrt(n)))[1:n],
y = rep(1:ceiling(sqrt(n)), times = ceiling(sqrt(n)))[1:n],
colours = palette
)
plot <- ggplot2::ggplot(viz_dat, aes(x = x, y = y, fill = colours)) +
ggplot2::geom_tile() +
ggplot2::scale_fill_identity() +
ggplot2::theme_void() +
ggplot2::theme(legend.position = "none") +
ggplot2::labs(title = "Continuous Palette Visualization")
return(list(palette = palette,
plot = plot))
} else if (visualiation == FALSE){
return(palette)
}
}
waachs_palette(n = 100, type = "continuous", visualisation = T)
waachs_palette(n = 100, type = "continuous", visualisation = F)
waachs_palette <- function(type = "discrete",
n,
visualisation = F,
...){
waachs_palette <- c("#D58957", "#FCD16B", "#89A1AD", "#FEF0D8")
if (type == "discrete"){
palette <- waachs_palette
} else if (type == "continuous"){
spectrum <- grDevices::colorRampPalette(waachs_palette, bias = 2, interpolate = "spline")
palette <- spectrum(n)
} else {
stop(sprintf("Error: Please select from colour categories 'continuous' or 'discrete'."))
}
if (visualisation == TRUE){
viz_dat <- data.frame(x = rep(1:ceiling(sqrt(n)), each = ceiling(sqrt(n)))[1:n],
y = rep(1:ceiling(sqrt(n)), times = ceiling(sqrt(n)))[1:n],
colours = palette
)
plot <- ggplot2::ggplot(viz_dat, aes(x = x, y = y, fill = colours)) +
ggplot2::geom_tile() +
ggplot2::scale_fill_identity() +
ggplot2::theme_void() +
ggplot2::theme(legend.position = "none") +
ggplot2::labs(title = "Continuous Palette Visualization")
return(list(palette = palette,
plot = plot))
} else if (visualisation == FALSE){
return(palette)
}
}
waachs_palette(n = 100, type = "continuous", visualisation = F)
waachs_palette <- function(type = "discrete",
n,
visualisation = F,
...){
waachs_palette <- c("#D58957", "#FCD16B", "#89A1AD", "#FEF0D8")
if (type == "discrete"){
palette <- waachs_palette
} else if (type == "continuous"){
spectrum <- grDevices::colorRampPalette(waachs_palette, bias = 2, interpolate = "spline", ...)
palette <- spectrum(n)
} else {
stop(sprintf("Error: Please select from colour categories 'continuous' or 'discrete'."))
}
if (visualisation == TRUE){
viz_dat <- data.frame(x = rep(1:ceiling(sqrt(n)), each = ceiling(sqrt(n)))[1:n],
y = rep(1:ceiling(sqrt(n)), times = ceiling(sqrt(n)))[1:n],
colours = palette
)
plot <- ggplot2::ggplot(viz_dat, aes(x = x, y = y, fill = colours)) +
ggplot2::geom_tile() +
ggplot2::scale_fill_identity() +
ggplot2::theme_void() +
ggplot2::theme(legend.position = "none") +
ggplot2::labs(title = "Continuous Palette Visualization")
return(list(palette = palette,
plot = plot))
} else if (visualisation == FALSE){
return(palette)
}
}
waachs_palette(n = 100, type = "continuous", visualisation = F, bias = 10000)
waachs_palette <- function(type = "discrete",
n,
visualisation = F,
bias = 2,
interpolate = "spline",
...){
waachs_palette <- c("#D58957", "#FCD16B", "#89A1AD", "#FEF0D8")
if (type == "discrete"){
palette <- waachs_palette
} else if (type == "continuous"){
spectrum <- grDevices::colorRampPalette(waachs_palette, ...)
palette <- spectrum(n)
} else {
stop(sprintf("Error: Please select from colour categories 'continuous' or 'discrete'."))
}
if (visualisation == TRUE){
viz_dat <- data.frame(x = rep(1:ceiling(sqrt(n)), each = ceiling(sqrt(n)))[1:n],
y = rep(1:ceiling(sqrt(n)), times = ceiling(sqrt(n)))[1:n],
colours = palette
)
plot <- ggplot2::ggplot(viz_dat, aes(x = x, y = y, fill = colours)) +
ggplot2::geom_tile() +
ggplot2::scale_fill_identity() +
ggplot2::theme_void() +
ggplot2::theme(legend.position = "none") +
ggplot2::labs(title = "Continuous Palette Visualization")
return(list(palette = palette,
plot = plot))
} else if (visualisation == FALSE){
return(palette)
}
}
waachs_palette(n = 100, type = "continuous", visualisation = F, bias = 10000)
waachs_palette <- function(type = "discrete",
n,
visualisation = F,
bias = 2,
interpolate = "spline",
...){
waachs_palette <- c("#D58957", "#FCD16B", "#89A1AD", "#FEF0D8")
if (type == "discrete"){
palette <- waachs_palette
} else if (type == "continuous"){
spectrum <- grDevices::colorRampPalette(waachs_palette, ...)
palette <- spectrum(n)
} else {
stop(sprintf("Error: Please select from colour categories 'continuous' or 'discrete'."))
}
if (visualisation == TRUE){
viz_dat <- data.frame(x = rep(1:ceiling(sqrt(n)), each = ceiling(sqrt(n)))[1:n],
y = rep(1:ceiling(sqrt(n)), times = ceiling(sqrt(n)))[1:n],
colours = palette
)
plot <- ggplot2::ggplot(viz_dat, aes(x = x, y = y, fill = colours)) +
ggplot2::geom_tile() +
ggplot2::scale_fill_identity() +
ggplot2::theme_void() +
ggplot2::theme(legend.position = "none") +
ggplot2::labs(title = "Continuous Palette Visualization")
return(list(palette = palette,
plot = plot))
} else if (visualisation == FALSE){
return(palette)
}
}
