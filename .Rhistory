person_summary = FALSE){
suppressMessages(library(dplyr))
data("icd_dat", package = "WAACHShelp")
if (!(flag_category %in% c(unique(icd_dat$var), "Other"))) {
stop(sprintf("Error: '%s' is not a valid input. Please choose from %s. If variable not contained in this list, please specify `flag_category == \"Other\"` and use the `flag_other_varname` and `flag_other_vals` arguments.",
flag_category, paste(c(unique(icd_dat$var)), collapse = ", ")))
}
# 1) Calculate age at record
## 1.1) For morbidity data sets -> relative to `subadm`
data <- data %>%
left_join(dobmap %>% select(rootnum, dob), by = "rootnum") %>%
mutate(age_adm = lubridate::time_length(lubridate::interval(dob, subadm), unit = "years"),
adm_under_age = case_when(floor(age_adm) <= (age-1) ~ "Yes",
floor(age_adm) > (age-1)  ~ "No")) # Calculate ages
# 2) Extract admissible ICD codes for the selected `flag_category`
## Uses the `icd_extraction` function
icds <- icd_extraction(data = data,
flag_category = flag_category,
flag_other_varname = flag_other_varname,
flag_other_vals = flag_other_vals)
# 3) Create flagging variables
## Uses `icd_flagging` function
icd_flags <- icd_flagging(data = data,
flag_category = flag_category,
icd_list = icds,
flag_other_vals = flag_other_vals,
flag_other_varname = flag_other_varname
)
data <- suppressMessages(left_join(data, icd_flags)) # Join by ALL variables to avoid double-ups
# 4) Add functionality for under age flagging
if (under_age == TRUE){
if (!"Other" %in% flag_category){
data <- data %>%
mutate(across(!!flag_category, ~case_when(adm_under_age == "Yes" ~ .,
adm_under_age == "No" ~ "No"),
.names = "{.col}_under_temp")
) %>%
rename_with(~ sub("_under_temp$", paste0("_under", age), .x), ends_with("_under_temp"))
} else if ("Other" %in% flag_category){
data <- data %>%
mutate(across(!!flag_other_varname, ~case_when(adm_under_age == "Yes" ~ .,
adm_under_age == "No" ~ "No"),
.names = "{.col}_under_temp")
) %>%
rename_with(~ sub("_under_temp$", paste0("_under", age), .x), ends_with("_under_temp"))
}
} else if (under_age == FALSE){
data <- data
}
# 5) Add functionality for person-level summary
## Use `person_level` function
if (person_summary == FALSE){
data <- data
} else if (person_summary == TRUE){
if (!"Other" %in% flag_category){
if (under_age == FALSE){
data <- person_level(data, flag_category)
} else if (under_age == TRUE) {
data <- person_level(data, paste0(flag_category, "_under", age))
}
} else if ("Other" %in% flag_category){
if (under_age == FALSE){
data <- person_level(data, flag_other_varname)
} else if (under_age == TRUE){
data <- person_level(data, paste0(flag_other_varname, "_under", age))
}
}
}
return(data)
}
test(data = morb, dobmap = dobmap, flag_category = "Sub_morb", under_age = TRUE, age = 25) %>% select(adm_under_age) %>% table
age <- 25
morb %>%
left_join(dobmap %>% select(rootnum, dob), by = "rootnum") %>%
mutate(age_adm = lubridate::time_length(lubridate::interval(dob, subadm), unit = "years"),
adm_under_age = case_when(floor(age_adm) <= (age-1) ~ "Yes",
floor(age_adm) > (age-1)  ~ "No"))
morb %>%
left_join(dobmap %>% select(rootnum, dob), by = "rootnum") %>%
mutate(age_adm = lubridate::time_length(lubridate::interval(dob, subadm), unit = "years"),
adm_under_age = case_when(floor(age_adm) <= (age-1) ~ "Yes",
floor(age_adm) > (age-1)  ~ "No")) %>% select(adm_under_age) %>% table
morb %>%
left_join(dobmap %>% select(rootnum, dob), by = "rootnum") %>%
mutate(age_adm = lubridate::time_length(lubridate::interval(dob, subadm), unit = "years"),
adm_under_age = case_when(floor(age_adm) <= age ~ "Yes",
floor(age_adm) > age  ~ "No")) %>% select(adm_under_age) %>% table
morb %>%
left_join(dobmap %>% select(rootnum, dob), by = "rootnum") %>%
mutate(age_adm = lubridate::time_length(lubridate::interval(dob, subadm), unit = "years"),
adm_under_age = case_when(floor(age_adm) <= (age-1) ~ "Yes",
floor(age_adm) > (age-1)  ~ "No")) %>% select(adm_under_age) %>% table
morb %>%
left_join(dobmap %>% select(rootnum, dob), by = "rootnum") %>%
mutate(age_adm = lubridate::time_length(lubridate::interval(dob, subadm), unit = "years"),
adm_under25 = case_when(floor(age_adm) <= 24 ~ "Yes", floor(age_adm) > 24  ~ "No")) %>%
select(adm_under25) %>%
table
morb %>%
left_join(dobmap %>% select(rootnum, dob), by = "rootnum") %>%
mutate(age_adm = lubridate::time_length(lubridate::interval(dob, subadm), unit = "years"),
adm_under25 = case_when(floor(age_adm) <= 24 ~ "Yes",
floor(age_adm) > 24  ~ "No")) %>%
select(adm_under25) %>%
table
test(data = morb, dobmap = dobmap, flag_category = "Sub_morb", under_age = TRUE, age = 25) %>% select(adm_under_age) %>% table
test <- function(data,
dobmap,
flag_category,
flag_other_vals,
flag_other_varname,
under_age = FALSE,
age = 18,
person_summary = FALSE){
suppressMessages(library(dplyr))
data("icd_dat", package = "WAACHShelp")
if (!(flag_category %in% c(unique(icd_dat$var), "Other"))) {
stop(sprintf("Error: '%s' is not a valid input. Please choose from %s. If variable not contained in this list, please specify `flag_category == \"Other\"` and use the `flag_other_varname` and `flag_other_vals` arguments.",
flag_category, paste(c(unique(icd_dat$var)), collapse = ", ")))
}
# 1) Calculate age at record
## 1.1) For morbidity data sets -> relative to `subadm`
data <- data %>%
left_join(dobmap %>% select(rootnum, dob), by = "rootnum") %>%
mutate(age_adm = lubridate::time_length(lubridate::interval(dob, subadm), unit = "years"),
adm_under25 = case_when(floor(age_adm) <= 24 ~ "Yes",
floor(age_adm) > 24  ~ "No")) # Calculate ages
# 2) Extract admissible ICD codes for the selected `flag_category`
## Uses the `icd_extraction` function
icds <- icd_extraction(data = data,
flag_category = flag_category,
flag_other_varname = flag_other_varname,
flag_other_vals = flag_other_vals)
# 3) Create flagging variables
## Uses `icd_flagging` function
icd_flags <- icd_flagging(data = data,
flag_category = flag_category,
icd_list = icds,
flag_other_vals = flag_other_vals,
flag_other_varname = flag_other_varname
)
data <- suppressMessages(left_join(data, icd_flags)) # Join by ALL variables to avoid double-ups
# 4) Add functionality for under age flagging
if (under_age == TRUE){
if (!"Other" %in% flag_category){
data <- data %>%
mutate(across(!!flag_category, ~case_when(adm_under_age == "Yes" ~ .,
adm_under_age == "No" ~ "No"),
.names = "{.col}_under_temp")
) %>%
rename_with(~ sub("_under_temp$", paste0("_under", age), .x), ends_with("_under_temp"))
} else if ("Other" %in% flag_category){
data <- data %>%
mutate(across(!!flag_other_varname, ~case_when(adm_under_age == "Yes" ~ .,
adm_under_age == "No" ~ "No"),
.names = "{.col}_under_temp")
) %>%
rename_with(~ sub("_under_temp$", paste0("_under", age), .x), ends_with("_under_temp"))
}
} else if (under_age == FALSE){
data <- data
}
# 5) Add functionality for person-level summary
## Use `person_level` function
if (person_summary == FALSE){
data <- data
} else if (person_summary == TRUE){
if (!"Other" %in% flag_category){
if (under_age == FALSE){
data <- person_level(data, flag_category)
} else if (under_age == TRUE) {
data <- person_level(data, paste0(flag_category, "_under", age))
}
} else if ("Other" %in% flag_category){
if (under_age == FALSE){
data <- person_level(data, flag_other_varname)
} else if (under_age == TRUE){
data <- person_level(data, paste0(flag_other_varname, "_under", age))
}
}
}
return(data)
}
test(data = morb, dobmap = dobmap, flag_category = "Sub_morb", under_age = TRUE, age = 25) %>% select(adm_under_age) %>% table
test(data = morb, dobmap = dobmap, flag_category = "Sub_morb", under_age = TRUE, age = 25) %>% select(adm_under25) %>% table
test <- function(data,
dobmap,
flag_category,
flag_other_vals,
flag_other_varname,
under_age = FALSE,
age = 18,
person_summary = FALSE){
suppressMessages(library(dplyr))
data("icd_dat", package = "WAACHShelp")
if (!(flag_category %in% c(unique(icd_dat$var), "Other"))) {
stop(sprintf("Error: '%s' is not a valid input. Please choose from %s. If variable not contained in this list, please specify `flag_category == \"Other\"` and use the `flag_other_varname` and `flag_other_vals` arguments.",
flag_category, paste(c(unique(icd_dat$var)), collapse = ", ")))
}
# 1) Calculate age at record
## 1.1) For morbidity data sets -> relative to `subadm`
data <- data %>%
left_join(dobmap %>% select(rootnum, dob), by = "rootnum") %>%
mutate(age_adm = lubridate::time_length(lubridate::interval(dob, subadm), unit = "years"),
adm_under_age = case_when(floor(age_adm) <= 24 ~ "Yes",
floor(age_adm) > 24  ~ "No")) # Calculate ages
# 2) Extract admissible ICD codes for the selected `flag_category`
## Uses the `icd_extraction` function
icds <- icd_extraction(data = data,
flag_category = flag_category,
flag_other_varname = flag_other_varname,
flag_other_vals = flag_other_vals)
# 3) Create flagging variables
## Uses `icd_flagging` function
icd_flags <- icd_flagging(data = data,
flag_category = flag_category,
icd_list = icds,
flag_other_vals = flag_other_vals,
flag_other_varname = flag_other_varname
)
data <- suppressMessages(left_join(data, icd_flags)) # Join by ALL variables to avoid double-ups
# 4) Add functionality for under age flagging
if (under_age == TRUE){
if (!"Other" %in% flag_category){
data <- data %>%
mutate(across(!!flag_category, ~case_when(adm_under_age == "Yes" ~ .,
adm_under_age == "No" ~ "No"),
.names = "{.col}_under_temp")
) %>%
rename_with(~ sub("_under_temp$", paste0("_under", age), .x), ends_with("_under_temp"))
} else if ("Other" %in% flag_category){
data <- data %>%
mutate(across(!!flag_other_varname, ~case_when(adm_under_age == "Yes" ~ .,
adm_under_age == "No" ~ "No"),
.names = "{.col}_under_temp")
) %>%
rename_with(~ sub("_under_temp$", paste0("_under", age), .x), ends_with("_under_temp"))
}
} else if (under_age == FALSE){
data <- data
}
# 5) Add functionality for person-level summary
## Use `person_level` function
if (person_summary == FALSE){
data <- data
} else if (person_summary == TRUE){
if (!"Other" %in% flag_category){
if (under_age == FALSE){
data <- person_level(data, flag_category)
} else if (under_age == TRUE) {
data <- person_level(data, paste0(flag_category, "_under", age))
}
} else if ("Other" %in% flag_category){
if (under_age == FALSE){
data <- person_level(data, flag_other_varname)
} else if (under_age == TRUE){
data <- person_level(data, paste0(flag_other_varname, "_under", age))
}
}
}
return(data)
}
test(data = morb, dobmap = dobmap, flag_category = "Sub_morb", under_age = TRUE, age = 25) %>% select(adm_under25) %>% table
test(data = morb, dobmap = dobmap, flag_category = "Sub_morb", under_age = TRUE, age = 25) %>% select(adm_under_age) %>% table
test(data = morb, dobmap = dobmap, flag_category = "Sub_morb", under_age = TRUE, age = 18) %>% select(adm_under_age) %>% table
test <- function(data,
dobmap,
flag_category,
flag_other_vals,
flag_other_varname,
under_age = FALSE,
age = 18,
person_summary = FALSE){
suppressMessages(library(dplyr))
data("icd_dat", package = "WAACHShelp")
if (!(flag_category %in% c(unique(icd_dat$var), "Other"))) {
stop(sprintf("Error: '%s' is not a valid input. Please choose from %s. If variable not contained in this list, please specify `flag_category == \"Other\"` and use the `flag_other_varname` and `flag_other_vals` arguments.",
flag_category, paste(c(unique(icd_dat$var)), collapse = ", ")))
}
# 1) Calculate age at record
## 1.1) For morbidity data sets -> relative to `subadm`
data <- data %>%
left_join(dobmap %>% select(rootnum, dob), by = "rootnum") %>%
mutate(age_adm = lubridate::time_length(lubridate::interval(dob, subadm), unit = "years"),
adm_under_age = case_when(floor(age_adm) <= 17 ~ "Yes",
floor(age_adm) > 17  ~ "No")) # Calculate ages
# 2) Extract admissible ICD codes for the selected `flag_category`
## Uses the `icd_extraction` function
icds <- icd_extraction(data = data,
flag_category = flag_category,
flag_other_varname = flag_other_varname,
flag_other_vals = flag_other_vals)
# 3) Create flagging variables
## Uses `icd_flagging` function
icd_flags <- icd_flagging(data = data,
flag_category = flag_category,
icd_list = icds,
flag_other_vals = flag_other_vals,
flag_other_varname = flag_other_varname
)
data <- suppressMessages(left_join(data, icd_flags)) # Join by ALL variables to avoid double-ups
# 4) Add functionality for under age flagging
if (under_age == TRUE){
if (!"Other" %in% flag_category){
data <- data %>%
mutate(across(!!flag_category, ~case_when(adm_under_age == "Yes" ~ .,
adm_under_age == "No" ~ "No"),
.names = "{.col}_under_temp")
) %>%
rename_with(~ sub("_under_temp$", paste0("_under", age), .x), ends_with("_under_temp"))
} else if ("Other" %in% flag_category){
data <- data %>%
mutate(across(!!flag_other_varname, ~case_when(adm_under_age == "Yes" ~ .,
adm_under_age == "No" ~ "No"),
.names = "{.col}_under_temp")
) %>%
rename_with(~ sub("_under_temp$", paste0("_under", age), .x), ends_with("_under_temp"))
}
} else if (under_age == FALSE){
data <- data
}
# 5) Add functionality for person-level summary
## Use `person_level` function
if (person_summary == FALSE){
data <- data
} else if (person_summary == TRUE){
if (!"Other" %in% flag_category){
if (under_age == FALSE){
data <- person_level(data, flag_category)
} else if (under_age == TRUE) {
data <- person_level(data, paste0(flag_category, "_under", age))
}
} else if ("Other" %in% flag_category){
if (under_age == FALSE){
data <- person_level(data, flag_other_varname)
} else if (under_age == TRUE){
data <- person_level(data, paste0(flag_other_varname, "_under", age))
}
}
}
return(data)
}
test(data = morb, dobmap = dobmap, flag_category = "Sub_morb", under_age = TRUE, age = 18) %>% select(adm_under_age) %>% table
test <- function(data,
dobmap,
flag_category,
flag_other_vals,
flag_other_varname,
under_age = FALSE,
age = 18,
person_summary = FALSE){
suppressMessages(library(dplyr))
data("icd_dat", package = "WAACHShelp")
if (!(flag_category %in% c(unique(icd_dat$var), "Other"))) {
stop(sprintf("Error: '%s' is not a valid input. Please choose from %s. If variable not contained in this list, please specify `flag_category == \"Other\"` and use the `flag_other_varname` and `flag_other_vals` arguments.",
flag_category, paste(c(unique(icd_dat$var)), collapse = ", ")))
}
# 1) Calculate age at record
## 1.1) For morbidity data sets -> relative to `subadm`
age_test <- age - 1
print(age_test)
data <- data %>%
left_join(dobmap %>% select(rootnum, dob), by = "rootnum") %>%
mutate(age_adm = lubridate::time_length(lubridate::interval(dob, subadm), unit = "years"),
adm_under_age = case_when(floor(age_adm) <= age_test ~ "Yes",
floor(age_adm) > age_test  ~ "No")) # Calculate ages
# 2) Extract admissible ICD codes for the selected `flag_category`
## Uses the `icd_extraction` function
icds <- icd_extraction(data = data,
flag_category = flag_category,
flag_other_varname = flag_other_varname,
flag_other_vals = flag_other_vals)
# 3) Create flagging variables
## Uses `icd_flagging` function
icd_flags <- icd_flagging(data = data,
flag_category = flag_category,
icd_list = icds,
flag_other_vals = flag_other_vals,
flag_other_varname = flag_other_varname
)
data <- suppressMessages(left_join(data, icd_flags)) # Join by ALL variables to avoid double-ups
# 4) Add functionality for under age flagging
if (under_age == TRUE){
if (!"Other" %in% flag_category){
data <- data %>%
mutate(across(!!flag_category, ~case_when(adm_under_age == "Yes" ~ .,
adm_under_age == "No" ~ "No"),
.names = "{.col}_under_temp")
) %>%
rename_with(~ sub("_under_temp$", paste0("_under", age), .x), ends_with("_under_temp"))
} else if ("Other" %in% flag_category){
data <- data %>%
mutate(across(!!flag_other_varname, ~case_when(adm_under_age == "Yes" ~ .,
adm_under_age == "No" ~ "No"),
.names = "{.col}_under_temp")
) %>%
rename_with(~ sub("_under_temp$", paste0("_under", age), .x), ends_with("_under_temp"))
}
} else if (under_age == FALSE){
data <- data
}
# 5) Add functionality for person-level summary
## Use `person_level` function
if (person_summary == FALSE){
data <- data
} else if (person_summary == TRUE){
if (!"Other" %in% flag_category){
if (under_age == FALSE){
data <- person_level(data, flag_category)
} else if (under_age == TRUE) {
data <- person_level(data, paste0(flag_category, "_under", age))
}
} else if ("Other" %in% flag_category){
if (under_age == FALSE){
data <- person_level(data, flag_other_varname)
} else if (under_age == TRUE){
data <- person_level(data, paste0(flag_other_varname, "_under", age))
}
}
}
return(data)
}
test(data = morb, dobmap = dobmap, flag_category = "Sub_morb", under_age = TRUE, age = 18) %>% select(adm_under_age) %>% table
test(data = morb, dobmap = dobmap, flag_category = "Sub_morb", under_age = TRUE, age = 25) %>% select(adm_under_age) %>% table
test(data = morb, dobmap = dobmap, flag_category = "MH_morb", under_age = TRUE, age = 18) %>% select(contains("MH_morb")) %>% table
test(data = morb, dobmap = dobmap, flag_category = "MH_morb", under_age = TRUE, age = 25) %>% select(contains("MH_morb")) %>% table
icd_morb_flag <- function(data,
dobmap,
flag_category,
flag_other_vals,
flag_other_varname,
under_age = FALSE,
age = 18,
person_summary = FALSE){
suppressMessages(library(dplyr))
data("icd_dat", package = "WAACHShelp")
if (!(flag_category %in% c(unique(icd_dat$var), "Other"))) {
stop(sprintf("Error: '%s' is not a valid input. Please choose from %s. If variable not contained in this list, please specify `flag_category == \"Other\"` and use the `flag_other_varname` and `flag_other_vals` arguments.",
flag_category, paste(c(unique(icd_dat$var)), collapse = ", ")))
}
# 1) Calculate age at record
## 1.1) For morbidity data sets -> relative to `subadm`
age_test <- age - 1
print(age_test)
data <- data %>%
left_join(dobmap %>% select(rootnum, dob), by = "rootnum") %>%
mutate(age_adm = lubridate::time_length(lubridate::interval(dob, subadm), unit = "years"),
adm_under_age = case_when(floor(age_adm) <= age_test ~ "Yes",
floor(age_adm) > age_test  ~ "No")) # Calculate ages
# 2) Extract admissible ICD codes for the selected `flag_category`
## Uses the `icd_extraction` function
icds <- icd_extraction(data = data,
flag_category = flag_category,
flag_other_varname = flag_other_varname,
flag_other_vals = flag_other_vals)
# 3) Create flagging variables
## Uses `icd_flagging` function
icd_flags <- icd_flagging(data = data,
flag_category = flag_category,
icd_list = icds,
flag_other_vals = flag_other_vals,
flag_other_varname = flag_other_varname
)
data <- suppressMessages(left_join(data, icd_flags)) # Join by ALL variables to avoid double-ups
# 4) Add functionality for under age flagging
if (under_age == TRUE){
if (!"Other" %in% flag_category){
data <- data %>%
mutate(across(!!flag_category, ~case_when(adm_under_age == "Yes" ~ .,
adm_under_age == "No" ~ "No"),
.names = "{.col}_under_temp")
) %>%
rename_with(~ sub("_under_temp$", paste0("_under", age), .x), ends_with("_under_temp"))
} else if ("Other" %in% flag_category){
data <- data %>%
mutate(across(!!flag_other_varname, ~case_when(adm_under_age == "Yes" ~ .,
adm_under_age == "No" ~ "No"),
.names = "{.col}_under_temp")
) %>%
rename_with(~ sub("_under_temp$", paste0("_under", age), .x), ends_with("_under_temp"))
}
} else if (under_age == FALSE){
data <- data
}
# 5) Add functionality for person-level summary
## Use `person_level` function
if (person_summary == FALSE){
data <- data
} else if (person_summary == TRUE){
if (!"Other" %in% flag_category){
if (under_age == FALSE){
data <- person_level(data, flag_category)
} else if (under_age == TRUE) {
data <- person_level(data, paste0(flag_category, "_under", age))
}
} else if ("Other" %in% flag_category){
if (under_age == FALSE){
data <- person_level(data, flag_other_varname)
} else if (under_age == TRUE){
data <- person_level(data, paste0(flag_other_varname, "_under", age))
}
}
}
return(data)
}
icd_morb_flag(data = morb, dobmap = dobmap, flag_category = "MH_morb", under_age= T, age = 18) %>% select(contains("MH_morb")) %>% table
icd_morb_flag(data = morb, dobmap = dobmap, flag_category = "MH_morb", under_age= T, age = 25) %>% select(contains("MH_morb")) %>% table
remove.packages("WAACHShelp")
rm(list = ls())
devtools::document()
devtools::install()
?WAACHShelp::icd_morb_flag
