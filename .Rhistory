theme(legend.position = "none") +
labs(title = "Continuous Palette Visualization")
return(list(palette = palette,
plot = plot))
} else if (visualiation == FALSE){
return(palette)
}
}
waachs_palette(n = 10, type = "continuous", visualisation = T)
library(ggplot2)
waachs_palette <- function(type = "discrete",
n,
visualisation = F,
...){
waachs_palette <- c("#D58957", "#FCD16B", "#89A1AD", "#FEF0D8")
if (type == "discrete"){
palette <- waachs_palette
} else if (type == "continuous"){
palette <- grDevices::colorRampPalette(waachs_palette, bias = 2, interpolate = "spline")(n)
} else {
stop(sprintf("Error: Please select from colour categories 'continuous' or 'discrete'."))
}
if (visualisation == TRUE){
viz_dat <- data.frame(x = rep(1:ceiling(sqrt(n)), each = ceiling(sqrt(n)))[1:n],
y = rep(1:ceiling(sqrt(n)), each = ceiling(sqrt(n)))[1:n],
colours = palette
)
plot <- ggplot(viz_dat, aes(x = x, y = y, fill = colours)) +
geom_tile() +
scale_fill_identity() +
theme_minimal() +
theme(legend.position = "none") +
labs(title = "Continuous Palette Visualization")
return(list(palette = palette,
plot = plot))
} else if (visualiation == FALSE){
return(palette)
}
}
waachs_palette(n = 10, type = "continuous", visualisation = T)
waachs_palette(type = "continuous", visualisation = T)
library(ggplot2)
waachs_palette <- function(type = "discrete",
n,
visualisation = F,
...){
waachs_palette <- c("#D58957", "#FCD16B", "#89A1AD", "#FEF0D8")
if (type == "discrete"){
palette <- waachs_palette
} else if (type == "continuous"){
palette <- grDevices::colorRampPalette(waachs_palette, bias = 2, interpolate = "spline")(n)
} else {
stop(sprintf("Error: Please select from colour categories 'continuous' or 'discrete'."))
}
if (visualisation == TRUE){
viz_dat <- data.frame(x = rep(1:ceiling(sqrt(n)), each = ceiling(sqrt(n)))[1:n],
y = rep(1:ceiling(sqrt(n)), each = ceiling(sqrt(n)))[1:n],
colours = palette
)
plot <- ggplot2::ggplot(viz_dat, aes(x = x, y = y, fill = colours)) +
ggplot2::geom_tile() +
ggplot2::scale_fill_identity() +
ggplot2::theme_minimal() +
ggplot2::theme(legend.position = "none") +
ggplot2::labs(title = "Continuous Palette Visualization")
return(list(palette = palette,
plot = plot))
} else if (visualiation == FALSE){
return(palette)
}
}
waachs_palette(type = "continuous", visualisation = T)
waachs_palette(n = 100, type = "continuous", visualisation = T)
waachs_palette <- function(type = "discrete",
n,
visualisation = F,
...){
waachs_palette <- c("#D58957", "#FCD16B", "#89A1AD", "#FEF0D8")
if (type == "discrete"){
palette <- waachs_palette
} else if (type == "continuous"){
spectrum <- grDevices::colorRampPalette(waachs_palette, bias = 2, interpolate = "spline")
palette <- spectrum(n)
} else {
stop(sprintf("Error: Please select from colour categories 'continuous' or 'discrete'."))
}
if (visualisation == TRUE){
viz_dat <- data.frame(x = rep(1:ceiling(sqrt(n)), each = ceiling(sqrt(n)))[1:n],
y = rep(1:ceiling(sqrt(n)), each = ceiling(sqrt(n)))[1:n],
colours = palette
)
plot <- ggplot2::ggplot(viz_dat, aes(x = x, y = y, fill = colours)) +
ggplot2::geom_tile() +
ggplot2::scale_fill_identity() +
ggplot2::theme_minimal() +
ggplot2::theme(legend.position = "none") +
ggplot2::labs(title = "Continuous Palette Visualization")
return(list(palette = palette,
plot = plot))
} else if (visualiation == FALSE){
return(palette)
}
}
waachs_palette(n = 100, type = "continuous", visualisation = T)
waachs_palette <- function(type = "discrete",
n,
visualisation = F,
...){
waachs_palette <- c("#D58957", "#FCD16B", "#89A1AD", "#FEF0D8")
if (type == "discrete"){
palette <- waachs_palette
} else if (type == "continuous"){
spectrum <- grDevices::colorRampPalette(waachs_palette, bias = 2, interpolate = "spline")
palette <- spectrum(n)
} else {
stop(sprintf("Error: Please select from colour categories 'continuous' or 'discrete'."))
}
if (visualisation == TRUE){
viz_dat <- data.frame(x = rep(1:ceiling(sqrt(n)), each = ceiling(sqrt(n)))[1:n],
y = rep(1:ceiling(sqrt(n)), each = ceiling(sqrt(n)))[1:n],
colours = palette
)
plot <- ggplot2::ggplot(viz_dat, aes(x = x, y = y, fill = colours)) +
ggplot2::geom_tile() +
ggplot2::scale_fill_identity() +
ggplot2::theme_minimal() +
ggplot2::theme(legend.position = "none") +
ggplot2::labs(title = "Continuous Palette Visualization")
return(list(palette = palette,
dat = viz_dat,
plot = plot))
} else if (visualiation == FALSE){
return(palette)
}
}
waachs_palette(n = 100, type = "continuous", visualisation = T)
waachs_palette <- function(type = "discrete",
n,
visualisation = F,
...){
waachs_palette <- c("#D58957", "#FCD16B", "#89A1AD", "#FEF0D8")
if (type == "discrete"){
palette <- waachs_palette
} else if (type == "continuous"){
spectrum <- grDevices::colorRampPalette(waachs_palette, bias = 2, interpolate = "spline")
palette <- spectrum(n)
} else {
stop(sprintf("Error: Please select from colour categories 'continuous' or 'discrete'."))
}
if (visualisation == TRUE){
viz_dat <- data.frame(x = rep(1:ceiling(sqrt(n)), each = ceiling(sqrt(n)))[1:n],
y = rep(1:ceiling(sqrt(n)), times = ceiling(sqrt(n)))[1:n],
colours = palette
)
plot <- ggplot2::ggplot(viz_dat, aes(x = x, y = y, fill = colours)) +
ggplot2::geom_tile() +
ggplot2::scale_fill_identity() +
ggplot2::theme_minimal() +
ggplot2::theme(legend.position = "none") +
ggplot2::labs(title = "Continuous Palette Visualization")
return(list(palette = palette,
dat = viz_dat,
plot = plot))
} else if (visualiation == FALSE){
return(palette)
}
}
waachs_palette(n = 100, type = "continuous", visualisation = T)
waachs_palette <- function(type = "discrete",
n,
visualisation = F,
...){
waachs_palette <- c("#D58957", "#FCD16B", "#89A1AD", "#FEF0D8")
if (type == "discrete"){
palette <- waachs_palette
} else if (type == "continuous"){
spectrum <- grDevices::colorRampPalette(waachs_palette, bias = 2, interpolate = "spline")
palette <- spectrum(n)
} else {
stop(sprintf("Error: Please select from colour categories 'continuous' or 'discrete'."))
}
if (visualisation == TRUE){
viz_dat <- data.frame(x = rep(1:ceiling(sqrt(n)), each = ceiling(sqrt(n)))[1:n],
y = rep(1:ceiling(sqrt(n)), times = ceiling(sqrt(n)))[1:n],
colours = palette
)
plot <- ggplot2::ggplot(viz_dat, aes(x = x, y = y, fill = colours)) +
ggplot2::geom_tile() +
ggplot2::scale_fill_identity() +
ggplot2::theme_void() +
ggplot2::theme(legend.position = "none") +
ggplot2::labs(title = "Continuous Palette Visualization")
return(list(palette = palette,
dat = viz_dat,
plot = plot))
} else if (visualiation == FALSE){
return(palette)
}
}
waachs_palette(n = 100, type = "continuous", visualisation = T)
waachs_palette <- function(type = "discrete",
n,
visualisation = F,
...){
waachs_palette <- c("#D58957", "#FCD16B", "#89A1AD", "#FEF0D8")
if (type == "discrete"){
palette <- waachs_palette
} else if (type == "continuous"){
spectrum <- grDevices::colorRampPalette(waachs_palette, bias = 2, interpolate = "spline")
palette <- spectrum(n)
} else {
stop(sprintf("Error: Please select from colour categories 'continuous' or 'discrete'."))
}
if (visualisation == TRUE){
viz_dat <- data.frame(x = rep(1:ceiling(sqrt(n)), each = ceiling(sqrt(n)))[1:n],
y = rep(1:ceiling(sqrt(n)), times = ceiling(sqrt(n)))[1:n],
colours = palette
)
plot <- ggplot2::ggplot(viz_dat, aes(x = x, y = y, fill = colours)) +
ggplot2::geom_tile() +
ggplot2::scale_fill_identity() +
ggplot2::theme_void() +
ggplot2::theme(legend.position = "none") +
ggplot2::labs(title = "Continuous Palette Visualization")
return(list(palette = palette,
plot = plot))
} else if (visualiation == FALSE){
return(palette)
}
}
waachs_palette(n = 100, type = "continuous", visualisation = T)
waachs_palette(n = 100, type = "continuous", visualisation = F)
waachs_palette <- function(type = "discrete",
n,
visualisation = F,
...){
waachs_palette <- c("#D58957", "#FCD16B", "#89A1AD", "#FEF0D8")
if (type == "discrete"){
palette <- waachs_palette
} else if (type == "continuous"){
spectrum <- grDevices::colorRampPalette(waachs_palette, bias = 2, interpolate = "spline")
palette <- spectrum(n)
} else {
stop(sprintf("Error: Please select from colour categories 'continuous' or 'discrete'."))
}
if (visualisation == TRUE){
viz_dat <- data.frame(x = rep(1:ceiling(sqrt(n)), each = ceiling(sqrt(n)))[1:n],
y = rep(1:ceiling(sqrt(n)), times = ceiling(sqrt(n)))[1:n],
colours = palette
)
plot <- ggplot2::ggplot(viz_dat, aes(x = x, y = y, fill = colours)) +
ggplot2::geom_tile() +
ggplot2::scale_fill_identity() +
ggplot2::theme_void() +
ggplot2::theme(legend.position = "none") +
ggplot2::labs(title = "Continuous Palette Visualization")
return(list(palette = palette,
plot = plot))
} else if (visualisation == FALSE){
return(palette)
}
}
waachs_palette(n = 100, type = "continuous", visualisation = F)
waachs_palette <- function(type = "discrete",
n,
visualisation = F,
...){
waachs_palette <- c("#D58957", "#FCD16B", "#89A1AD", "#FEF0D8")
if (type == "discrete"){
palette <- waachs_palette
} else if (type == "continuous"){
spectrum <- grDevices::colorRampPalette(waachs_palette, bias = 2, interpolate = "spline", ...)
palette <- spectrum(n)
} else {
stop(sprintf("Error: Please select from colour categories 'continuous' or 'discrete'."))
}
if (visualisation == TRUE){
viz_dat <- data.frame(x = rep(1:ceiling(sqrt(n)), each = ceiling(sqrt(n)))[1:n],
y = rep(1:ceiling(sqrt(n)), times = ceiling(sqrt(n)))[1:n],
colours = palette
)
plot <- ggplot2::ggplot(viz_dat, aes(x = x, y = y, fill = colours)) +
ggplot2::geom_tile() +
ggplot2::scale_fill_identity() +
ggplot2::theme_void() +
ggplot2::theme(legend.position = "none") +
ggplot2::labs(title = "Continuous Palette Visualization")
return(list(palette = palette,
plot = plot))
} else if (visualisation == FALSE){
return(palette)
}
}
waachs_palette(n = 100, type = "continuous", visualisation = F, bias = 10000)
waachs_palette <- function(type = "discrete",
n,
visualisation = F,
bias = 2,
interpolate = "spline",
...){
waachs_palette <- c("#D58957", "#FCD16B", "#89A1AD", "#FEF0D8")
if (type == "discrete"){
palette <- waachs_palette
} else if (type == "continuous"){
spectrum <- grDevices::colorRampPalette(waachs_palette, ...)
palette <- spectrum(n)
} else {
stop(sprintf("Error: Please select from colour categories 'continuous' or 'discrete'."))
}
if (visualisation == TRUE){
viz_dat <- data.frame(x = rep(1:ceiling(sqrt(n)), each = ceiling(sqrt(n)))[1:n],
y = rep(1:ceiling(sqrt(n)), times = ceiling(sqrt(n)))[1:n],
colours = palette
)
plot <- ggplot2::ggplot(viz_dat, aes(x = x, y = y, fill = colours)) +
ggplot2::geom_tile() +
ggplot2::scale_fill_identity() +
ggplot2::theme_void() +
ggplot2::theme(legend.position = "none") +
ggplot2::labs(title = "Continuous Palette Visualization")
return(list(palette = palette,
plot = plot))
} else if (visualisation == FALSE){
return(palette)
}
}
waachs_palette(n = 100, type = "continuous", visualisation = F, bias = 10000)
waachs_palette <- function(type = "discrete",
n,
visualisation = F,
bias = 2,
interpolate = "spline",
...){
waachs_palette <- c("#D58957", "#FCD16B", "#89A1AD", "#FEF0D8")
if (type == "discrete"){
palette <- waachs_palette
} else if (type == "continuous"){
spectrum <- grDevices::colorRampPalette(waachs_palette, ...)
palette <- spectrum(n)
} else {
stop(sprintf("Error: Please select from colour categories 'continuous' or 'discrete'."))
}
if (visualisation == TRUE){
viz_dat <- data.frame(x = rep(1:ceiling(sqrt(n)), each = ceiling(sqrt(n)))[1:n],
y = rep(1:ceiling(sqrt(n)), times = ceiling(sqrt(n)))[1:n],
colours = palette
)
plot <- ggplot2::ggplot(viz_dat, aes(x = x, y = y, fill = colours)) +
ggplot2::geom_tile() +
ggplot2::scale_fill_identity() +
ggplot2::theme_void() +
ggplot2::theme(legend.position = "none") +
ggplot2::labs(title = "Continuous Palette Visualization")
return(list(palette = palette,
plot = plot))
} else if (visualisation == FALSE){
return(palette)
}
}
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::install()
WAACHShelp::waachs_palette()
?WAACHShelp::waachs_palette
remove.packages("WAACHShelp")
devtools::document()
stringr::str_to_title("continuous")
waachs_palette <- function(type = "discrete",
n,
visualisation = F,
bias = 2,
interpolate = "spline",
...){
waachs_palette <- c("#D58957",
"#FCD16B",
"#89A1AD",
"#FEF0D8")
if (type == "discrete"){
palette <- waachs_palette
} else if (type == "continuous"){
spectrum <- grDevices::colorRampPalette(waachs_palette, ...)
palette <- spectrum(n)
} else {
stop(sprintf("Error: Please select from colour categories 'continuous' or 'discrete'."))
}
if (visualisation == TRUE){
viz_dat <- data.frame(x = rep(1:ceiling(sqrt(n)),
each = ceiling(sqrt(n)))[1:n],
y = rep(1:ceiling(sqrt(n)),
times = ceiling(sqrt(n)))[1:n],
colours = palette
)
plot <- ggplot2::ggplot(viz_dat,
aes(x = x,
y = y,
fill = colours)) +
ggplot2::geom_tile() +
ggplot2::scale_fill_identity() +
ggplot2::theme_void() +
ggplot2::theme(legend.position = "none") +
ggplot2::labs(title = paste0(stringr::str_to_title(type), " Palette Visualization"))
return(list(palette = palette,
plot = plot))
} else if (visualisation == FALSE){
return(palette)
}
}
waachs_palette(type = "discrete", n = 4, visualisation = T)
waachs_palette <- function(type = "discrete",
n,
visualisation = F,
bias = 2,
interpolate = "spline",
...){
waachs_palette <- c("#D58957",
"#FCD16B",
"#89A1AD",
"#FEF0D8")
if (type == "discrete"){
palette <- waachs_palette
} else if (type == "continuous"){
spectrum <- grDevices::colorRampPalette(waachs_palette, ...)
palette <- spectrum(n)
} else {
stop(sprintf("Error: Please select from colour categories 'continuous' or 'discrete'."))
}
if (visualisation == TRUE){
viz_dat <- data.frame(x = rep(1:ceiling(sqrt(n)),
each = ceiling(sqrt(n)))[1:n],
y = rep(1:ceiling(sqrt(n)),
times = ceiling(sqrt(n)))[1:n],
colours = palette
)
plot <- ggplot2::ggplot(viz_dat,
aes(x = x,
y = y,
fill = colours)) +
ggplot2::geom_tile() +
ggplot2::scale_fill_identity() +
ggplot2::theme_void() +
ggplot2::theme(legend.position = "none") +
ggplot2::labs(title = paste0(stringr::str_to_title(type), " Palette Visualization"))
return(list(palette = palette,
plot = plot))
} else if (visualisation == FALSE){
return(palette)
}
}
waachs_palette(type = "discrete", n = 4, visualisation = T)
waachs_palette(type = "discrete")
waachs_palette(type = "discrete", n = 5)
waachs_palette(type = "discrete", n = 4, visualisation = T)
waachs_palette(type = "continuous", n = 4, visualisation = T)
biometrics::waachs_palette(type = "continuous", n = 4, visualisation = T)
biometrics::waachs_palette(type = "continuous", n = 100, visualisation = T)
waachs_palette <- function(type = "discrete",
n,
visualisation = F,
bias = 2,
interpolate = "spline",
...){
waachs_palette <- c("#D58957",
"#FCD16B",
"#89A1AD",
"#FEF0D8")
if (type == "discrete"){
palette <- waachs_palette
} else if (type == "continuous"){
spectrum <- grDevices::colorRampPalette(waachs_palette, ...)
palette <- spectrum(n)
} else {
stop(sprintf("Error: Please select from colour categories 'continuous' or 'discrete'."))
}
if (visualisation == TRUE){
viz_dat <- data.frame(x = rep(1:ceiling(sqrt(n)),
each = ceiling(sqrt(n)))[1:n],
y = rep(1:ceiling(sqrt(n)),
times = ceiling(sqrt(n)))[1:n],
colours = palette
)
plot <- ggplot2::ggplot(viz_dat, aes(x = x, y = y, fill = colours)) +
ggplot2::geom_tile() +
ggplot2::scale_fill_identity() +
ggplot2::theme_void() +
ggplot2::theme(legend.position = "none") +
ggplot2::labs(title = paste0(stringr::str_to_title(type), " Palette Visualization"))
return(list(palette = palette,
plot = plot))
} else if (visualisation == FALSE){
return(palette)
}
}
biometrics::waachs_palette(type = "continuous", n = 100, visualisation = T)
waachs_palette(type = "continuous", n = 4, visualisation = T)
source("~/GitHub/WAACHShelp/R/waachs_palette.R", echo=TRUE)
waachs_palette(type = "continuous", n = 4, visualisation = T)
waachs_palette(type = "continuous", n = 20, visualisation = T)
waachs_palette(type = "continuous", n = 100, visualisation = T)
waachs_palette(type = "continuous", n = 5, visualisation = T)
waachs_palette(type = "continuous", n = 100, visualisation = T)
waachs_palette(type = "continuous", n = 100, visualisation = T, bias = 100)
waachs_palette(type = "discrete", n = 100, visualisation = T, bias = 100)
remove.packages("WAACHShelp")
rm(list = ls())
devtools::document()
?thekids_table
?biometrics::thekids_table
rm(list = ls())
remove.packages("WAACHShelp")
devtools::document()
